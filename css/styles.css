:root {
  /* Colors */

  --primary-color: #2584ff;
  --secondary-color: #00d9ff;
  --color-accent: #ff3400;
  --heading-color: #1b0760;
  --body-color: #918ca4;
  --border-color: #ccc;
  --body-darker-color: #5c5577;
}

*,
*::after,
*::before {
  box-sizing: border-box;
}

/* Typography */

html {
  font-size: 62.5%;
}

body {
  font-family: "Inter", "Arial", "Helvetica" sans-serif;
  color: var(--body-color);
  font-size: 2.4rem;
  line-height: 1.5;
}

h1,
h2,
h3 {
  color: var(--heading-color);
  margin-bottom: 1rem;
}

h1 {
  font-size: 7rem;
}

h2 {
  font-size: 40px;
}

h3 {
  font-size: 30px;
}

p {
  margin-top: 0;
}

@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

/* Links */

a {
  text-decoration: none;
}

.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
  transition: margin 0.15s;
}

.fa-arrow-circle-right {
  /* We used a icon from Font Awesome another way to do this is to use .link-arrow::after and use the content: "-->" property however the arrow doesn't look nice like that.  */
  color: #ff3400;
  display: inline;
  margin-left: 5px; /* Pixel value is used as we want the space to always be the same no matter the font size of the users browser  */
}

.link-arrow:hover {
  margin-right: 8px;
}

@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/* Badges */

.badge {
  border-radius: 20px;
  padding: 0.5rem 2rem;
  font-size: 2rem;
  font-weight: 700;
  white-space: nowrap;
}

.badge--primary {
  /* As you can see we use BEM naming convention to seperate a block element from a modifier */
  background: var(--primary-color);
  color: white;
}

.badge--secondary {
  /* As you can see we use BEM naming convention to seperate a block element from a modifier */
  background: var(--secondary-color);
  color: white;
}

.badge--small {
  font-size: 1.6rem;
  padding: 0.5rem 1.5rem;
}

@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/* Lists */

.list {
  list-style: none;
  padding-left: 0; /* All browsers apply a default padding to the left, we remove it by setting the value to 0 */
  color: var(--heading-color);
}

.list--inline .list__item {
  display: inline-block;
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url(/images/tick.svg); /* This property is used to provide an image/icon for the list style instead of bullet points etc.  */
  padding-left: 3rem;
}

.list--tick .list__item {
  /* If we remove .list--tick this will apply this padding to all list items we only want to apply it to list items inside the block with the ticks which is .list--tick */
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0;
  }
}

/* Icons */
/* Pixel (absolute units) units are being used as icons are always the same size regardless of whether it is being viewed on phones or larger screens */

.icon {
  width: 40px;
  height: 40px;
}

.icon-container {
  background: #f4f9f8;
  width: 64px;
  height: 64px;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  border-radius: 100%;
}

.icon--primary {
  fill: var(--primary-color);
}

.icon--white {
  fill: white;
}

.icon--accent-color {
  background: var(--color-accent);
}

.icon--small {
  width: 30px;
  height: 30px;
}

/* Buttons */

.btn {
  /* Cursor property allows us to chose the type of cursor that shows when we hover over the element with this class and property defined in it. */
  border-radius: 40px;
  border: 0;
  color: white;
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  margin: 1rem 0;
  outline: 0;
  padding: 2rem 3rem;
  text-transform: uppercase;
  white-space: nowrap;
  text-align: center;
}

.btn--primary {
  background: var(--primary-color);
}

.btn--primary:hover {
  background: #3a8ffd;
}

.btn--secondary {
  background: var(--secondary-color);
}

.btn--secondary:hover {
  background: #00cdeb;
}

.btn--accent {
  background: var(--color-accent);
}

.btn--accent:hover {
  background: #ec3000;
}

.btn--outline {
  color: var(--heading-color);
  border: 2.5px solid var(--heading-color);
  background: white;
}

.btn--outline:hover {
  background: var(--heading-color);
  color: white;
}

.btn--block {
  width: 100%;
  display: inline-block;
}

.btn--stretched {
  padding-left: 6rem;
  padding-right: 6rem;
}

.fa-search {
  margin-right: 1rem;
}
@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }
}

/* Inputs */

.input {
  padding: 1.5rem 3.5rem;
  border: 1px solid var(--border-color);
  border-radius: 30px;
  outline: 0;
  color: var(--heading-color);
  font-size: 2rem;
}

::placeholder {
  /* Change the text color of the placeholder text */
  color: #cdcbd7;
}

.input-group {
  border: 1px solid var(--border-color);
  border-radius: 30px;
  display: flex;
}

.input-group .input {
  /* Inside of input-group we don't want our input to have a border so we do nesting to select input elements inside the input-group container */
  border: 0;
  flex-grow: 1;
  padding: 1.5rem 1rem;
}

.input-group .btn {
  /* Buttons inside input-group container */
  margin: 4px;
}

@media screen and (min-width: 1024px) {
  .input {
    font-size: 1.5rem;
  }
}

/* Cards */

.card {
  border-radius: 7px;
  box-shadow: 0 0 20px 10px #f3f3f3;
  overflow: hidden;
  /* We have overflow because in .card--primary we are setting a background colour for the entire <header> element which is inside the <div> with .card class, 
  therefore since we applied a border-radius to this div element, the header element background will be outside of the div elements border which has been
  changed via the border-radius property applied of 7px, it will look like the border radius is not applied, to fix this we must hide contents that go outside 
  the border (in this case it is the primary background color set in .card--primary) by using overflow property for the parent in this case the <div>. 
  
  This content can be anything, for example if we had text that goes outside of the <div> with the class .card then the border-radius will not apply rather
  it will show the content going outside of the element. So we use overflow to hide the contents going outside of the <div> where the border-radius is 7px
  thus showing the border-radius.*/
}

.card__header,
.card__body {
  padding: 2rem 3rem;
  letter-spacing: 1px;
}

.card--primary {
  background: var(--primary-color);
  color: white;
}

.card--secondary {
  background: var(--secondary-color);
  color: white;
}

.card--secondary .badge--secondary {
  background: #02cdf1;
}

/* Plans */
.plan__name {
  margin: 0;
  font-size: 2.4rem;
  font-weight: 500;
  color: #fff;
}

.plan__price {
  font-size: 6rem;
}

.plan__billing-cycle {
  font-size: 2.4rem;
  font-weight: 300;
  opacity: 0.8; /* Opacity property is the transparency of the element */
  margin-right: 1rem;
}

.plan__description {
  font-size: 2rem;
  font-weight: 300;
  letter-spacing: 1px;
  display: block;
}

.plan--popular .card__header {
  position: relative;
  /* Parent element has to be non-static for absolute positioning to work */
}

.plan--popular .card__header::before {
  /* We are nesting into the .card__header element and adding an element 'before' all the original content inside this element */
  content: url(/images/popular.svg);
  /* We can use content property with the url function to add images instead of using the <img> tag, we style the image in the same css rule the image is
  supplied */
  width: 40px;
  display: inline-block;
  /* We set the display to inline-block so the width property is applied as images are inline element by default so we cannot apply width or height
  properties to inline elements */
  position: absolute;
  top: -6px;
  right: 5%;
  /* We used % as the unit as regardless of the size of the card we want this badge to be 5% from the right of the card */
}

@media screen and (min-width: 1024px) {
  .plan__name {
    font: size 1.4rem;
  }
  .plan__price {
    font-size: 5rem;
  }
  .plan__billing-cycle {
    font-size: 1.6rem;
  }
  .plan__description {
    font-size: 1.7rem;
  }
}

/* Media Objects */

/* Media objects are basically when you have an image/icon on the left with a heading/title and some information next to the image/icon to its right. */

.media {
  display: flex;
}

.media__image {
  margin-left: 1.5rem;
  margin-top: 1rem;
}

.media__body {
  padding: 0 2rem;
}

.media__title {
  margin: 0;
  /* All heading elements have a margin applied by default */
}

/* Quotes */

.quote {
  font-size: 3rem;
  font-style: italic;
  color: var(--body-darker-color);
  line-height: 1.3;
}

.quote__text::before {
  content: open-quote;
  /* open-quote is a predefined value in html  */
}

.quote__text::after {
  content: close-quote;
  /* close-quote is a predefined value in html  */
}

.quote__author {
  font-style: 3rem;
  font-weight: 700;
  font-style: normal;
  margin-bottom: 0;
}

.quote__org {
  font-size: 2rem;
  color: var(--heading-color);
  opacity: 0.4;
  font-style: normal;
}

.quote__line {
  position: relative;
  bottom: 10px;
}

@media screen and (min-width) {
  .quote {
    font-size: 2rem;
  }

  .quote__author {
    font-size: 2.4rem;
  }

  .quote__org {
    font-size: 1.6rem;
  }
}

/* Grid Layout */

.grid {
  display: grid;
}

@media screen and (min-width: 768px) {
  /* 768px is the general breakpoint for tablets/ipads etc. An Ipad has a screen width of 768px. */
  .grid--cols-2 {
    /* This class only exists for screens greater than 768px */
    grid-template-columns: 1fr 1fr;
    /* 1fr 1fr means, we are going to take all the available space, since we only have two columns we divide this available space by 2 and give each
    column 1 slice. */
  }
}

@media screen and (min-width: 1024px) {
  .grid--cols-3 {
    grid-template-columns: 1fr 1fr 1fr;
  }
}

/* Testimonials */

.testimonial {
  padding: 3rem;
}

.testimonial__image {
  position: relative;
}

.testimonial__image > img {
  /* We are using a relational selector to select the first 'img' element inside of the container with the class .testimonial__image */
  width: 100%;
  /* We gave the image a width of 100% so that it always takes 100% of the container/column it is in even when we resize the screen since by default images
  are inline elements so they do not take all the width of the container unlike block level elements. */
}

.testimonial__image > .icon-container {
  /* We could also do .testimonial__image .icon container */
  position: absolute;
  top: 3rem;
  right: -30px;
}

@media screen and (min-width: 768px) {
  .testimonial .quote {
    font-size: 2.4rem;
    margin-left: 6rem;
  }

  .testimonial .quote__author {
    font-size: 2.4rem;
  }
}

/* Callouts */

.callout {
  padding: 4rem;
  border-radius: 5px;
}

.callout--primary {
  background: var(--primary-color);
  color: white;
}

.callout__content > h2 {
  margin: 0;
  color: white;
  font-size: 3rem;
}

.callout__button {
  justify-self: center;
  align-self: center;
}

.callout__content {
  text-align: center;
}
@media screen and (min-width: 768px) {
  .grid--cols-2 {
    grid-template-columns: 1fr auto;
    /* When screen is larger than 768px we don't want the button to take up an equal amount of space on the screen as the content column 
    therefore we set the column size to auto which will provide enough space just to contain the button element, the remaining space will be 
    allocated to the other column */
  }

  .callout__content {
    text-align: left;
  }
  .callout__button {
    justify-self: start;
    margin: 0 2rem;
  }
}

/* Collapsibles */

.collapsible__header {
  display: flex;
  justify-content: space-between;
}

.collapsible__heading {
  margin-top: 0;
  font-size: 3rem;
}

.collapsible__chevron {
  transform: rotate(-90deg);
  transition: transform 0.3s;
}

.collapsible__content {
  /* display: none; */
  /* Setting display to 'none' hides the content, however since we want to add a transition to the content we cant do this if we use the display property
  instead we will set the height of this container to 0, which will then mean the content will overflow so we use the overflow property to hide it */
  max-height: 0;
  overflow: hidden;
  /* We used max-height instead of height property, this is explained below. */
  opacity: 0;
  transition: max-height 0.5s, opacity 0.5s;
}

.collapsible--expanded .collapsible__chevron {
  transform: rotate(0);
  /* When content is expanded we want the chevron to be rotated back to normal so it faces down */
}

.collapsible--expanded .collapsible__content {
  /* display: block; */
  /* When content is expanded we want to show the content, as we did not use display property to hide the content we do not use display property to show it.
  Instead we increase the height of the container which we set to 0 so it can show the content inside the container not overflowed out of it. */
  max-height: 100vh;
  /* Since we used the 'max-height' property instead of 'height' we are saying the container 'can be 100vh' instead of 'it is 100vh'. Therefore
  instead of this container taking up the entire height of the viewport which is not necessary as it will not have that much content, it will take up as
  much vertical space needed for its content however it can fill up content to 100% of the height of the web page as we have set it to this if necessary, 
  it will fill up as much vertical space if more content is added to 100% height of the web page, else it will fill up as much as its content.*/
  opacity: 1;
}

/* Blocks */

/* We can clip a section and change its shape using https://bennettfeely.com/ to get the clip-path property */

.block {
  /* If we define a variable outside of the .root: the variable can only be used inside of the element it is defined in and all its children*/
  --padding-vertical: 6rem;
  padding: var(--padding-vertical) 2rem;
}

.block__heading {
  margin-top: 0;
}

.block--dark {
  background: black;
  color: #7b858b;
}

.block--dark .block__heading {
  color: white;
}

.block--skew-right {
  /* We use the calc function to perform calculations, as we can see we are adding 4rems to the variable --padding-vertical */
  clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 80%);
  padding-bottom: calc(var(--padding-vertical) + 4rem);
}

.block--skew-left {
  /* We use the calc function to perform calculations, as we can see we are adding 4rems to the variable --padding-vertical */
  clip-path: polygon(0% 0%, 100% 0%, 100% 80%, 0% 100%);
  padding-bottom: calc(var(--padding-vertical) + 4rem);
}

.block__header {
  text-align: center;
}

.container {
  max-width: 1140px;
  margin: 0 auto;
  /* auto value evenly distributes the margin to both sides */
}

/* Navigation Menu */

.nav {
  background: black;
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  padding: 0 1rem;
  align-items: center;
}

.nav__list {
  width: 100%;
  margin: 0;
}

.nav__item {
  padding: 0.5rem 2rem;
  border-bottom: 1px solid #222;
}

.nav__item > a {
  /* anchor links have their own colours so we must change the colours for the links manually using CSS */
  color: #d2d0db;
  transition: color 0.3s;
}

.nav__item > a:hover {
  color: #fff;
}

.nav__toggler {
  opacity: 0.5;
  transition: box-shadow 0.15s;
  cursor: pointer;
}

.nav.collapsible--expanded .nav__toggler {
  opacity: 1;
  box-shadow: 0 0 0 3px #666;
  border-radius: 5px;
}

@media screen and (min-width: 768px) {
  .nav__toggler {
    display: none;
    /* display: none, hides the element */
  }

  .nav__list {
    width: auto;
    display: flex;
    font-size: 1.6rem;
    max-height: 100%;
    opacity: 1;
  }

  .nav__item {
    border: 0;
  }
}
